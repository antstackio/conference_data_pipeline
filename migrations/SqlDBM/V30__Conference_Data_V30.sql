-- **************************************************************************
-- * Generated by SqlDBM: Conference Data, v30 by sourav.mondal@antstack.io *



-- ************************************** conference_raw.virtual_attendee

CREATE TABLE IF NOT EXISTS conference_raw.virtual_attendee
(
 registration_no string NOT NULL,
 first_name      string NOT NULL,
 last_name       string NOT NULL,
 email_address   string NOT NULL,
 job_role        string NOT NULL,
 state           string NOT NULL,
 session_title   string NOT NULL,
 login_time      string NOT NULL,
 logout_time     string NOT NULL,
 filename        string NOT NULL,
 create_user     string NOT NULL,
 create_date     date NOT NULL,
 modified_user   string NOT NULL,
 modified_date   date NOT NULL,
 is_processed    boolean NOT NULL
);


-- ************************************** conference_refined.session

CREATE TABLE IF NOT EXISTS conference_refined.session
(
 session_id       bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK of the session',
 session_title    string NOT NULL COMMENT 'Title of the session',
 event_id         bigint NOT NULL COMMENT 'SK of event id',
 event_name       string NOT NULL COMMENT 'Name of the event',
 speakers         string NOT NULL COMMENT 'Speaker(s) of the session',
 supporter        string COMMENT 'Supporter or sponsors of the session',
 session_date     date NOT NULL COMMENT 'Date when the session took place',
 start_time       timestamp NOT NULL COMMENT 'Time of the in 24 hrs. format when the session was supposed to take place',
 end_time         timestamp NOT NULL COMMENT 'Time of the in 24 hrs. format when the session was supposed to end',
 exact_start_time timestamp COMMENT 'Time of the in 24 hrs. format when the session was started',
 exact_end_time   timestamp COMMENT 'Time of the in 24 hrs. format when the session was ended',
 create_user      string NOT NULL COMMENT 'User who executed the sql query',
 create_date      date NOT NULL COMMENT 'Creation date of the row',
 modified_user    string COMMENT 'User who executed the sql query to modify the row',
 modified_date    date COMMENT 'Date when the row modified',
 is_processed     boolean NOT NULL
) COMMENT 'Dimension table for the session';


-- ************************************** conference_raw.session

CREATE TABLE IF NOT EXISTS conference_raw.session
(
 session_title    string NOT NULL,
 session_date     string NOT NULL,
 speakers         string NOT NULL,
 supporters       string NOT NULL,
 start_time       string NOT NULL,
 end_time         string NOT NULL,
 exact_start_time string NOT NULL,
 exact_end_time   string NOT NULL,
 filename         string NOT NULL,
 create_user      string NOT NULL,
 create_date      date NOT NULL,
 modified_user    string NOT NULL,
 modified_date    date NOT NULL,
 is_processed     boolean NOT NULL
);


-- ************************************** conference_trusted.satisfaction_rating

CREATE TABLE IF NOT EXISTS conference_trusted.satisfaction_rating
(
 session_id    bigint NOT NULL COMMENT 'SK of the session dimension',
 session_title string NOT NULL COMMENT 'Title of the session',
 question_id   bigint NOT NULL COMMENT 'SK of the question dimension',
 question_text string NOT NULL COMMENT 'Text of the question',
 rating        int NOT NULL COMMENT 'Ratings, possible value(1,2,3,4,5)',
 rating_count  int NOT NULL COMMENT 'No, of attendee picked the rate',
 target_rating int NOT NULL COMMENT 'Target rating is 5',
 event_name    string NOT NULL
) COMMENT 'Table to store satisfaction rating';


-- ************************************** conference_refined.registrant

CREATE TABLE IF NOT EXISTS conference_refined.registrant
(
 attendee_id     bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK for attendee',
 event_id        bigint NOT NULL,
 event_name      string NOT NULL COMMENT 'Name of the event',
 session_id      bigint NOT NULL,
 session_title   string NOT NULL,
 attendee_type   string NOT NULL,
 registration_no string NOT NULL COMMENT 'Application generated registration no.',
 first_name      string NOT NULL COMMENT 'First name of the person',
 last_name       string NOT NULL COMMENT 'Last name of the person',
 job_role        string COMMENT 'Current job role of the person',
 state           string NOT NULL COMMENT 'State from which the person belongs',
 email_address   string NOT NULL COMMENT 'Email address of the person',
 logout_time     timestamp,
 login_time      timestamp,
 create_date     date NOT NULL COMMENT 'Creation date of the row',
 create_user     string NOT NULL COMMENT 'User who executed the sql query',
 modified_user   string COMMENT 'User who executed the sql query to modify the row',
 modified_date   date COMMENT 'Date when the raw modified',
 is_processed    boolean NOT NULL
) COMMENT 'Dimension table to people who registered for an event';


-- ************************************** conference_trusted.question_dim

CREATE TABLE IF NOT EXISTS conference_trusted.question_dim
(
 question_id   bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK of the question',
 question_text string NOT NULL COMMENT 'Question text',
 create_date   date COMMENT 'Creation date of the row',
 create_user   string COMMENT 'User who executed the sql query',
 modified_date date COMMENT 'Date when the row modified',
 modified_user string COMMENT 'User who executed the sql query to modify the row'
) COMMENT 'Dimension table of the question';


-- ************************************** conference_trusted.question_attendee_dim

CREATE TABLE IF NOT EXISTS conference_trusted.question_attendee_dim
(
 session_id    bigint NOT NULL COMMENT 'SK of the session',
 session_title string NOT NULL COMMENT 'Title of the session',
 attendee_id   bigint NOT NULL COMMENT 'SK of the attendee',
 question_id   bigint NOT NULL COMMENT 'SK of the question',
 question_text string NOT NULL COMMENT 'Text of the question',
 option_text   string NOT NULL COMMENT 'Option text picked by attendee',
 create_date   date NOT NULL COMMENT 'Creation date of the row',
 create_user   string NOT NULL COMMENT 'User who executed the sql query'
) COMMENT 'Dimension to table to store questions, its options and attendee who answered the question';


-- ************************************** conference_refined.polling_questions

CREATE TABLE IF NOT EXISTS conference_refined.polling_questions
(
 session_title            string NOT NULL,
 attendee_registration_no string NOT NULL,
 poll_question            string NOT NULL,
 poll_option              string,
 option_text              string,
 create_user              string NOT NULL,
 create_date              date NOT NULL,
 modified_user            string,
 modified_date            date,
 is_processed             boolean NOT NULL
);


-- ************************************** conference_raw.polling_questions

CREATE TABLE IF NOT EXISTS conference_raw.polling_questions
(
 poll_question            string NOT NULL,
 poll_option              string NOT NULL,
 attendee_registration_no string NOT NULL,
 option_text              string NOT NULL,
 session_title            string NOT NULL,
 filename                 string NOT NULL,
 create_user              string NOT NULL,
 create_date              date NOT NULL,
 modified_user            string NOT NULL,
 modified_date            date NOT NULL,
 is_processed             boolean NOT NULL
);


-- ************************************** conference_raw.inperson_attendee

CREATE TABLE IF NOT EXISTS conference_raw.inperson_attendee
(
 registration_no string NOT NULL,
 first_name      string NOT NULL,
 last_name       string NOT NULL,
 email_address   string NOT NULL,
 job_role        string NOT NULL,
 state           string NOT NULL,
 session_title   string NOT NULL,
 filename        string NOT NULL,
 create_user     string NOT NULL,
 create_date     date NOT NULL,
 modified_user   string NOT NULL,
 modified_date   date NOT NULL,
 is_processed    boolean NOT NULL
);


-- ************************************** conference_trusted.event_dim

CREATE TABLE IF NOT EXISTS conference_trusted.event_dim
(
 event_id      bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK of the event',
 event_name    string NOT NULL COMMENT 'Name of the event',
 start_date    date NOT NULL COMMENT 'start date of the event',
 end_date      date NOT NULL COMMENT 'end date of the event',
 addr_line_1   string NOT NULL COMMENT 'Address/location of the event',
 addr_line_2   string COMMENT 'Address/location of the event',
 city          string COMMENT 'Name of the city where the event took place',
 state         string COMMENT 'Name of the state where the event took place',
 zipcode       string COMMENT 'zipcode of the place where the event happened',
 country       string COMMENT 'Country where the event took place',
 create_date   date COMMENT 'Creation date of the row',
 create_user   string COMMENT 'User who executed the sql query',
 modified_date string COMMENT 'Date when the raw modified',
 modified_user string COMMENT 'User who executed the sql query to modify the row'
) COMMENT 'Event dimension';


-- ************************************** conference_refined.event

CREATE TABLE IF NOT EXISTS conference_refined.event
(
 event_id      bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK of the event',
 event_name    string NOT NULL COMMENT 'Name of the event',
 start_date    date NOT NULL COMMENT 'start date of the event',
 end_date      date NOT NULL COMMENT 'end date of the event',
 addr_line_1   string NOT NULL COMMENT 'Address/location of the event',
 addr_line_2   string COMMENT 'Address/location of the event',
 city          string COMMENT 'Name of the city where the event took place',
 state         string COMMENT 'Name of the state where the event took place',
 zipcode       string NOT NULL COMMENT 'zipcode of the place where the event happened',
 country       string NOT NULL COMMENT 'Country where the event took place',
 create_date   date NOT NULL COMMENT 'Creation date of the row',
 create_user   string NOT NULL COMMENT 'User who executed the sql query',
 modified_date string COMMENT 'Date when the raw modified',
 modified_user string COMMENT 'User who executed the sql query to modify the row',
 is_processed  boolean NOT NULL
)
 TBLPROPERTIES (Property = '')
 COMMENT 'Event dimension';


-- ************************************** conference_raw.event

CREATE TABLE IF NOT EXISTS conference_raw.event
(
 event_name    string NOT NULL,
 start_date    string NOT NULL,
 end_date      string NOT NULL,
 addr_line_1   string NOT NULL,
 addr_line_2   string NOT NULL,
 city          string NOT NULL,
 state         string NOT NULL,
 zipcode       string NOT NULL,
 country       string NOT NULL,
 filename      string NOT NULL,
 create_user   string NOT NULL,
 create_date   date NOT NULL,
 modified_user string NOT NULL,
 modified_date date NOT NULL,
 is_processed  boolean NOT NULL
);


-- ************************************** conference_trusted.session_dim

CREATE TABLE IF NOT EXISTS conference_trusted.session_dim
(
 session_id       bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK of the session',
 session_title    string NOT NULL COMMENT 'Title of the session',
 event_id         bigint NOT NULL COMMENT 'SK of event id',
 event_name       string NOT NULL COMMENT 'Name of the event',
 speakers         string NOT NULL COMMENT 'Speaker(s) of the session',
 supporter        string NOT NULL COMMENT 'Supporter or sponsors of the session',
 session_date     date NOT NULL COMMENT 'Date when the session took place',
 start_time       timestamp NOT NULL COMMENT 'Time of the in 24 hrs. format when the session was supposed to take place',
 end_time         timestamp NOT NULL COMMENT 'Time of the in 24 hrs. format when the session was supposed to end',
 exact_start_time timestamp COMMENT 'Time of the in 24 hrs. format when the session was started',
 exact_end_time   timestamp COMMENT 'Time of the in 24 hrs. format when the session was ended',
 create_user      string COMMENT 'User who executed the sql query',
 create_date      date COMMENT 'Creation date of the row',
 modified_user    string COMMENT 'User who executed the sql query to modify the row',
 modified_date    date COMMENT 'Date when the row modified'
) COMMENT 'Dimension table for the session';


-- ************************************** conference_trusted.event_registrant_dim

CREATE TABLE IF NOT EXISTS conference_trusted.event_registrant_dim
(
 attendee_id     bigint GENERATED BY DEFAULT AS IDENTITY COMMENT 'SK for attendee',
 event_id        bigint NOT NULL,
 event_name      string NOT NULL COMMENT 'Name of the event',
 registration_no string COMMENT 'Application generated registration no.',
 first_name      string COMMENT 'First name of the person',
 last_name       string NOT NULL COMMENT 'Last name of the person',
 job_role        string NOT NULL COMMENT 'Current job role of the person',
 state           string NOT NULL COMMENT 'State from which the person belongs',
 email_address   string NOT NULL COMMENT 'Email address of the person',
 create_date     date COMMENT 'Creation date of the row',
 create_user     string COMMENT 'User who executed the sql query',
 modified_user   string COMMENT 'User who executed the sql query to modify the row',
 modified_date   date COMMENT 'Date when the raw modified'
) COMMENT 'Dimension table to people who registered for an event';


-- ************************************** conference_trusted.event_attendee_fact

CREATE TABLE IF NOT EXISTS conference_trusted.event_attendee_fact
(
 event_id         bigint NOT NULL COMMENT 'SK of the event dimension',
 event_name       string NOT NULL COMMENT 'Name of the event or conference',
 registrant_count int NOT NULL COMMENT 'Total no of people who registered for the event',
 attendee_count   int NOT NULL COMMENT 'Total no of people who attended the event'
) COMMENT 'Fact table to store fact related to attendee, registrant of an event';


-- ************************************** conference_trusted.session_poll_fact

CREATE TABLE IF NOT EXISTS conference_trusted.session_poll_fact
(
 question_id             bigint NOT NULL COMMENT 'SK of the question dimension',
 session_id              bigint NOT NULL COMMENT 'SK of the session dimension',
 session_name            string NOT NULL COMMENT 'Title of the session',
 question_response_count int NOT NULL COMMENT 'Total no. of the people who answered the question',
 create_date             date NOT NULL COMMENT 'Creation date of the row',
 create_user             string NOT NULL COMMENT 'User who executed the sql query'
) COMMENT 'Fact table of session and questions asked after the session';


-- ************************************** conference_trusted.attendee_session_fact

CREATE TABLE IF NOT EXISTS conference_trusted.attendee_session_fact
(
 session_id             bigint NOT NULL CONSTRAINT PK_1 PRIMARY KEY,
 event_total_attendee   int NOT NULL,
 session_total_attendee int NOT NULL,
 session_title          string NOT NULL,
 create_date            date NOT NULL,
 create_user            string NOT NULL
);


-- ************************************** conference_trusted.attendee_session_dim

CREATE TABLE IF NOT EXISTS conference_trusted.attendee_session_dim
(
 session_id    bigint NOT NULL COMMENT 'SK of the session dimension',
 session_title string NOT NULL COMMENT 'Title of the session',
 attendee_id   bigint NOT NULL COMMENT 'SK of the attendee',
 attendee_type string NOT NULL COMMENT 'Mode of attendance, possible values in person and virtual',
 login_time    timestamp NOT NULL,
 logout_time   timestamp NOT NULL,
 create_date   date NOT NULL COMMENT 'creation date of the row',
 create_user   string NOT NULL COMMENT 'User who executed the sql query'
) COMMENT 'Table that connects sessions and attendee who attended the sessions';

